name,kind,type,power,phase,priority,remove,step1,params1,step2,params2,step3,params3,step4,params4,step5,params5
Pyro Sphere,special,FR,8,,,,dealDamage,,,,,,,,,
Hex,special,GH,6,,,,dealDamage,,,,,,,,,
Dragon Rage,special,DG,,,,,dealDamage,4,,,,,,,,
Fire Spin,special,FR,4,,,,addAction,Fire Spin*damage,,,,,,,,
Fire Spin*damage,,,,End,,{ turnsPassed: 3 },dealDamage,target.SD,,,,,,,,
Fire Spin_trap,,,,,,,,,,,,,,,,
Sandstorm,status,GD,,,,,addAction,Sandstorm*damage,,,,,,,,
Sandstorm*damage,,,,,,() => turnsPassed() >= 3,dealDamage,target.SD,,,,,,,,
Fly,physical,AI,9,,,,removeUserFromField,,addActionNextTurn,Fly*land,addListener,Fly_vulnerableTo,,,,
Fly*land,physical,AI,9,,,,dealDamage,,addUserToField,,removeListener,Fly_vulnerableTo,,,,
Fly_vulnerableTo,,,,,,userOnField,onMoveInit,us,ifAny,"{ hasFlag: ['hitsFly', 'hitsInvulnerable', 'neverMiss'] , userHasAbility: ['No Guard'], targetHasAbility: ['No Guard'] }",enable,ignoreRange,ifAny,"{ moveName: ['Gust', 'Twister'] }",multiplyDamageBy,2
Dig,physical,GD,8,,,,removeUserFromField,,addActionNextTurn,Dig*emerge,addListener,Dig_vulnerableTo,,,,
Dig*emerge,physical,AI,9,,,userOnField,dealDamage,,addUserToField,,removeListener,Dig_vulnerableTo,,,,
Dig_vulnerableTo,,,,,,,onMoveInit,us,ifAny,"{ hasFlag: ['hitsDig', 'hitsInvulnerable', 'neverMiss'] , userHasAbility: ['No Guard'], targetHasAbility: ['No Guard'] }",enable,ignoreRange,ifAny,"{ moveName: ['Earthquake', 'Magnitude'] }",multiplyDamageBy,2
Metronome Punch,physical,NR,() => { const power = user.battleState.metronomePunch.power; return power ? power : 4; },,,,dealDamage,,call,() => { const state = user.battleState; state.power = (state.lastTurnActivated - battle.turn === 1) ? state.power +2 : 4; state.lastTurnActivated = battle.turn; },,,,,,
Light Screen,status,LT,,,,,addListener,Light Screen_shield,addListener,Light Screen_shield,,,,,,
Light Screen_shield,,,,,,() => turnsPassed() >= 3,onMoveInit,team,if,{ isOfKind: 'special' },multiplyDamageBy,0.5,,,,
---,,,,,,,onMoveEnd,team,if,{ hasFlag: 'breaksBarriers' },removeListener,Light Screen_shield,,,,
Hypnosis,status,PY,,,,,sleep,{ chance: 0.5 },,,,,,,,
Sleep Talk,status,NR,,,,,triggerAction,() => randomUserMove({ excluding: 'Sleep Talk' }).action(),,,,,,,,
Destiny Bond,status,PY,,,,,addListener,Destiny Bond_reaper,updateControl,"{ name: 'Destiny Bond_reaper', reaperTarget: target }",,,,,,
Destiny Bond_reaper,,,,,,,onMonFaint,us,unless,{ lastMove: 'Destiny Bond' },dealDamage,{ value: state.target.HP },,,,
Minimize,status,,,,,,,,,,,,,,,
Stomp,,,,,,,,,,,,,,,,
Revenge,,,,,,,,,,,,,,,,
GiveSwiftSwim,,,,,,,,,,,,,,,,
Disable,,,,,,,,,,,,,,,,
Final Suggestion,,,,,,,,,,,,,,,,
Melodic Suggestion,,,,,,,,,,,,,,,,